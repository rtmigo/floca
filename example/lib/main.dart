import 'package:flutter/material.dart';

import 'i18n.dart'; // file generated by floca

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();

  // the [localeIndex] will determine what to pass as the [locale]
  // argument to the [MaterialApp] constructor. It will allow us to switch
  // between supported locales manually.
  int localeIndex = -1; // -1 for null, 0 and above - for supportedLocales[localeIndex]
}

class _MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        localizationsDelegates: localizationsDelegates,
        supportedLocales: supportedLocales,
        locale: (widget.localeIndex < 0) ? null : supportedLocales[widget.localeIndex],

        // the current [context] was made before we created the MaterialApp
        // with localization. To use a localized context, we need a new builder

        home: Builder(builder: (context) {

          // ok, this [context] knows the locale

          return Scaffold(
              appBar: AppBar(
                  title: Text( widget.localeIndex < 0
                               ? 'Default locale'
                               : 'Locale #${widget.localeIndex}')),
              body: Center(
                  child: Text(
                    context.floca.hello, // 'hello', or 'hola', or 'привет' depending on locale
                    style: Theme.of(context).textTheme.headline3)),
              floatingActionButton: FloatingActionButton(
                onPressed: () => setState(() {
                  // increase localeIndex and rebuild MaterialApp with
                  // other [locale] argument
                  if (++widget.localeIndex >= supportedLocales.length) {
                    widget.localeIndex = -1;
                  }
                }),
                child: Icon(Icons.g_translate),
              ));
        }));
  }
}
