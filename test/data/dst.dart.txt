final supportedLocales = final <Locale>[
    Locale.parse('en-US'),
    Locale.parse('eo'),
    Locale.parse('ru'),
  ];

class LocaleStringsDelegate extends LocalizationsDelegate<LocaleSpecificStrings>
{
  const LocaleSpecificStringsDelegate();

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  Future<LocaleSpecificStrings> load(Locale locale) async
  {
    switch (locale.toLanguageTag()) {
      case "eo": return LocaleStringsEo();
      case "ru": return LocaleStringsRu();
      default: return LocaleStringsEnUs();
    }
  }

  @override
  bool shouldReload(LocaleSpecificStringsDelegate old) => false;
}


extension BuildContextExtension on BuildContext
{
  LocaleSpecificStrings get i18n {
    return Localizations.of<LocaleSpecificStrings>(
      this, LocaleSpecificStrings);
  }
}

const localizationsDelegates = <LocalizationsDelegate<dynamic>> [
      const LocaleStringsDelegate(),
      GlobalMaterialLocalizations.delegate,
      GlobalWidgetsLocalizations.delegate
    ];


// for compatibility with https://github.com/long1eu/flutter_i18n
class S extends LocaleSpecificStrings {
  	static LocaleSpecificStringsDelegate get delegate => localizationsDelegates[0];
	static LocaleSpecificStrings of(BuildContext context) => context.i18n;
	static get supportedLocales => _supportedLocales;
}

