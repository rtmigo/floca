
// auto-generated by flocagen from 'src.csv'


// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes


import 'package:flutter/widgets.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
export 'package:flutter_localizations/flutter_localizations.dart';


class LocaleSpecificStringsRu extends LocaleSpecificStrings
{
  @override
  String get ticking => "Тиканье";
  @override
  String get chimes2359 => "Бой курантов в 23:59";
  @override
  String get newYearsModeComment => "Новогодний режим: 12-й удар колокола приходится на полночь";
  @override
  String get startTest2359 => "Тестировать 23:59";
  @override
  String get stopTest2359 => "Остановить тест";
  @override
  String get termsOfUse => "Условия использования";
  @override
  String get privacyTerms => "Конфиденциальность";
  @override
  String get licenses => "Авторские права";
  @override
  String get syncInfo_accuracy => "Часы показывают точное время ±PRECISION секунд";
  @override
  String get syncInfo_delta => "Время телефона ACT на DELTA секунд";
  @override
  String get syncInfo_time => "Часы синхронизированы в PREVTIME. Следующая синхронизация в NEXTTIME";
  @override
  String get syncInfo_pct => "Идет синхронизация: SYNCPCT";
  @override
  String get syncInfo_never => "Время не синхронизировано. Следующая синхронизация в NEXTTIME";
  @override
  String get timeBehind => "отстает";
  @override
  String get timeAhead => "спешит";
  @override
  String get language => "Язык";
  @override
  String get rateApp => "Оценить приложение";
}


class LocaleSpecificStrings
{
  @override
  String get ticking => "Ticking";
  @override
  String get chimes2359 => "Chimes at 23:59";
  @override
  String get newYearsModeComment => "New Year's Eve mode: The 12th bell strikes at midnight";
  @override
  String get startTest2359 => "Test 23:59";
  @override
  String get stopTest2359 => "Stop test";
  @override
  String get termsOfUse => "Terms of Use";
  @override
  String get privacyTerms => "Privacy terms";
  @override
  String get licenses => "Copyrights";
  @override
  String get syncInfo_accuracy => "The clock shows exact time ±PRECISION seconds";
  @override
  String get syncInfo_delta => "Phone time is DELTA seconds ACT";
  @override
  String get syncInfo_time => "Clock was synchronized at PREVTIME. Next sync at NEXTTIME";
  @override
  String get syncInfo_pct => "Synchronizing now: SYNCPCT";
  @override
  String get syncInfo_never => "Time is not synchronized. Next sync at NEXTTIME";
  @override
  String get timeBehind => "behind";
  @override
  String get timeAhead => "ahead";
  @override
  String get language => "Language";
  @override
  String get rateApp => "Rate the app";
}


const _supportedLocales = const <Locale> [
    const Locale('ru'),
    const Locale('en'),
  ];

class LocaleSpecificStringsDelegate extends LocalizationsDelegate<LocaleSpecificStrings>
{
  const LocaleSpecificStringsDelegate();

  @override
  bool isSupported(Locale locale) =>
    ["ru", "en"].contains(locale.languageCode);

  get supportedLocales => _supportedLocales; // для совместимости со старым кодом (<=2020)

  @override
  Future<LocaleSpecificStrings> load(Locale locale) async
  {
    if (locale.languageCode=="ru") return LocaleSpecificStringsRu();
    return LocaleSpecificStrings();
  }

  @override
  bool shouldReload(LocaleSpecificStringsDelegate old) => false;
}


extension LocaleSpecificStringsBuilderExt on BuildContext
{
  LocaleSpecificStrings get i18n {
    return Localizations.of<LocaleSpecificStrings>(
      this, LocaleSpecificStrings);
  }
}

const localizationsDelegates = <LocalizationsDelegate<dynamic>> [
      const LocaleSpecificStringsDelegate(),
      GlobalMaterialLocalizations.delegate,
      GlobalWidgetsLocalizations.delegate
    ];


// for compatibility with https://github.com/long1eu/flutter_i18n
class S extends LocaleSpecificStrings {
  	static LocaleSpecificStringsDelegate get delegate => localizationsDelegates[0];
	static LocaleSpecificStrings of(BuildContext context) => context.i18n;
	static get supportedLocales => _supportedLocales;
}


final supportedLocales = _supportedLocales;